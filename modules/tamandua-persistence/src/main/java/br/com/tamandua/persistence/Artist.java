package br.com.tamandua.persistence;

// Generated 21/02/2010 23:04:42 by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Artist generated by hbm2java
 */
@Entity
@Table(name = "artist", uniqueConstraints = @UniqueConstraint(columnNames = "uri"))
public class Artist implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
       
    private Long idArtist;
    private Image imageHuge;
    private Image imageTiny;
    private Image image;
    private String name;
    private Date dtBirth;
    private Date dtEnd;
    private Integer type;
    private Long totalAccess;
    private Long idCountry;
    private String sortName;
    private String letters;
    private String uri;
    private String url;
    private String flag_moderate = "N";
    private String flag_public = "S";
    private Set<Music> musics = new HashSet<Music>(0);
    private Set<ArtistDiscography> artistDiscographies = new HashSet<ArtistDiscography>(0);
    private Set<Album> albums = new HashSet<Album>(0);
    private Set<MusicArtist> musicArtists = new HashSet<MusicArtist>(0);
    private Set<ArtistAlias> artistAliases = new HashSet<ArtistAlias>(0);
    private Set<Image> allImages = new HashSet<Image>(0);

    public Artist() {
    }

    public Artist(Image imageByIdImageHuge, Image imageByIdImageTiny, Image imageByIdImage) {
        this.imageHuge = imageByIdImageHuge;
        this.imageTiny = imageByIdImageTiny;
        this.image = imageByIdImage;
    }

    public Artist(Image imageByIdImageHuge, Image imageByIdImageTiny, Image imageByIdImage, String name, Date dtBirth,
            Date dtEnd, Integer type, Long totalAccess, Long idCountry, String sortName, String letters, String uri, String url,
            Set<Music> musics, Set<ArtistDiscography> artistDiscographies, Set<Album> albums, Set<MusicArtist> musicArtists,
            Set<ArtistAlias> artistAliases) {
        this.imageHuge = imageByIdImageHuge;
        this.imageTiny = imageByIdImageTiny;
        this.image = imageByIdImage;
        this.name = name;
        this.dtBirth = dtBirth;
        this.dtEnd = dtEnd;
        this.type = type;
        this.totalAccess = totalAccess;
        this.idCountry = idCountry;
        this.sortName = sortName;
        this.letters = letters;
        this.uri = uri;
        this.url = url;
        this.musics = musics;
        this.artistDiscographies = artistDiscographies;
        this.albums = albums;
        this.musicArtists = musicArtists;
        this.artistAliases = artistAliases;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id_artist", unique = true, nullable = false)
    public Long getIdArtist() {
        return this.idArtist;
    }

    public void setIdArtist(Long idArtist) {
        this.idArtist = idArtist;
    }

    @ManyToOne(cascade = {CascadeType.REFRESH}, fetch = FetchType.LAZY)
    @JoinColumn(name = "id_image_huge")
    public Image getImageHuge() {
        return this.imageHuge;
    }

    public void setImageHuge(Image imageByIdImageHuge) {
        this.imageHuge = imageByIdImageHuge;
    }

    @ManyToOne(cascade = {CascadeType.REFRESH}, fetch = FetchType.LAZY)
    @JoinColumn(name = "id_image_tiny")
    public Image getImageTiny() {
        return this.imageTiny;
    }

    public void setImageTiny(Image imageByIdImageTiny) {
        this.imageTiny = imageByIdImageTiny;
    }

    @ManyToOne(cascade = {CascadeType.REFRESH}, fetch = FetchType.LAZY)
    @JoinColumn(name = "id_image")
    public Image getImage() {
        return this.image;
    }

    public void setImage(Image imageByIdImage) {
        this.image = imageByIdImage;
    }

    @Column(name = "name", length = 100)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "dt_birth", length = 10)
    public Date getDtBirth() {
        return this.dtBirth;
    }

    public void setDtBirth(Date dtBirth) {
        this.dtBirth = dtBirth;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "dt_end", length = 10)
    public Date getDtEnd() {
        return this.dtEnd;
    }

    public void setDtEnd(Date dtEnd) {
        this.dtEnd = dtEnd;
    }

    @Column(name = "type")
    public Integer getType() {
        return this.type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    @Column(name = "total_access")
    public Long getTotalAccess() {
        return this.totalAccess;
    }

    public void setTotalAccess(Long totalAccess) {
        this.totalAccess = totalAccess;
    }

    @Column(name = "id_country")
    public Long getIdCountry() {
        return this.idCountry;
    }

    public void setIdCountry(Long idCountry) {
        this.idCountry = idCountry;
    }

    @Column(name = "sort_name", length = 100)
    public String getSortName() {
        return this.sortName;
    }

    public void setSortName(String sortName) {
        this.sortName = sortName;
    }

    @Column(name = "letters", length = 36)
    public String getLetters() {
        return this.letters;
    }

    public void setLetters(String letters) {
        this.letters = letters;
    }

    @Column(name = "uri", unique = true, length = 500)
    public String getUri() {
        return this.uri;
    }

    public void setUri(String uri) {
        this.uri = uri;
    }

    @Column(name = "url", length = 1500)
    public String getUrl() {
        return this.url;
    }

    public void setUrl(String url) {
        this.url = url;
    }
    
    @Column(name = "flag_moderate")       
    public String getFlag_moderate() {
		return flag_moderate == null ? "N" : flag_moderate;
	}

	public void setFlag_moderate(String flagModerate) {
		flag_moderate = flagModerate;
	}

	@Column(name = "flag_public")	
	public String getFlag_public() {
		return flag_public == null ? "S" : flag_public;
	}

	public void setFlag_public(String flagPublic) {
		flag_public = flagPublic;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "artist")
    public Set<Music> getMusics() {
        return this.musics;
    }

    public void setMusics(Set<Music> musics) {
        this.musics = musics;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "artist")
    public Set<ArtistDiscography> getArtistDiscographies() {
        return this.artistDiscographies;
    }

    public void setArtistDiscographies(Set<ArtistDiscography> artistDiscographies) {
        this.artistDiscographies = artistDiscographies;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "artist")
    public Set<Album> getAlbums() {
        return this.albums;
    }

    public void setAlbums(Set<Album> albums) {
        this.albums = albums;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "artist")
    public Set<MusicArtist> getMusicArtists() {
        return this.musicArtists;
    }

    public void setMusicArtists(Set<MusicArtist> musicArtists) {
        this.musicArtists = musicArtists;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "artist")
    public Set<ArtistAlias> getArtistAliases() {
        return this.artistAliases;
    }

    public void setArtistAliases(Set<ArtistAlias> artistAliases) {
        this.artistAliases = artistAliases;
    }

    /**
     * @return the allImages
     */
    @ManyToMany(targetEntity = Image.class)
    @JoinTable(name="artist_image",
        joinColumns=@JoinColumn(name="id_artist"),
        inverseJoinColumns=@JoinColumn(name="id_image")
    )
    public Set<Image> getAllImages() {
        return allImages;
    }

    /**
     * @param allImages the allImages to set
     */
    public void setAllImages(Set<Image> allImages) {
        this.allImages = allImages;
    }
}
