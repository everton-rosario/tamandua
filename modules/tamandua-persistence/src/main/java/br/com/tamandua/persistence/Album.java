package br.com.tamandua.persistence;

// Generated 21/02/2010 23:04:42 by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Album generated by hbm2java
 */
@Entity
@Table(name = "album", uniqueConstraints = @UniqueConstraint(columnNames = "uri"))
public class Album implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    private Long idAlbum;
    private Artist artist;
    private Image imageByIdCover;
    private Image imageByIdBackCover;
    private String name;
    private Integer year;
    private Long idCountry;
    private String uri;
    private String url;
    private Set<ArtistDiscography> artistDiscographies = new HashSet<ArtistDiscography>(0);

    public Album() {
    }

    public Album(Image imageByIdCover, Image imageByIdBackCover) {
        this.imageByIdCover = imageByIdCover;
        this.imageByIdBackCover = imageByIdBackCover;
    }

    public Album(Artist artist, Image imageByIdCover, Image imageByIdBackCover, String name, Integer year, Long idCountry,
            String uri, String url, Set<ArtistDiscography> artistDiscographies) {
        this.artist = artist;
        this.imageByIdCover = imageByIdCover;
        this.imageByIdBackCover = imageByIdBackCover;
        this.name = name;
        this.year = year;
        this.idCountry = idCountry;
        this.uri = uri;
        this.url = url;
        this.artistDiscographies = artistDiscographies;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id_album", unique = true, nullable = false)
    public Long getIdAlbum() {
        return this.idAlbum;
    }

    public void setIdAlbum(Long idAlbum) {
        this.idAlbum = idAlbum;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_artist")
    public Artist getArtist() {
        return this.artist;
    }

    public void setArtist(Artist artist) {
        this.artist = artist;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_cover")
    public Image getImageByIdCover() {
        return this.imageByIdCover;
    }

    public void setImageByIdCover(Image imageByIdCover) {
        this.imageByIdCover = imageByIdCover;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_back_cover")
    public Image getImageByIdBackCover() {
        return this.imageByIdBackCover;
    }

    public void setImageByIdBackCover(Image imageByIdBackCover) {
        this.imageByIdBackCover = imageByIdBackCover;
    }

    @Column(name = "name", length = 300)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "year")
    public Integer getYear() {
        return this.year;
    }

    public void setYear(Integer year) {
        this.year = year;
    }

    @Column(name = "id_country")
    public Long getIdCountry() {
        return this.idCountry;
    }

    public void setIdCountry(Long idCountry) {
        this.idCountry = idCountry;
    }

    @Column(name = "uri", unique = true, length = 500)
    public String getUri() {
        return this.uri;
    }

    public void setUri(String uri) {
        this.uri = uri;
    }

    @Column(name = "url", length = 1500)
    public String getUrl() {
        return this.url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "album")
    public Set<ArtistDiscography> getArtistDiscographies() {
        return this.artistDiscographies;
    }

    public void setArtistDiscographies(Set<ArtistDiscography> artistDiscographies) {
        this.artistDiscographies = artistDiscographies;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((idAlbum == null) ? 0 : idAlbum.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Album other = (Album) obj;
        if (idAlbum == null) {
            if (other.idAlbum != null)
                return false;
        } else if (!idAlbum.equals(other.idAlbum))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "Album [" + (idAlbum != null ? "idAlbum=" + idAlbum + ", " : "") + (name != null ? "name=" + name + ", " : "")
                + (uri != null ? "uri=" + uri : "") + "]";
    }

}
