tamandua.indexer.artist.count=select count(l.id_lyric) from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and a.id_artist = ?
tamandua.indexer.artist=select l.id_lyric as id_lyric, m.id_music as id_music, l.laguage as laguage, l.text as text, l.total_access as total_access, l.uri as lyric_uri, l.lyric_title as lyric_title, l.lyric_type as lyric_type,  m.title as music_title, m.uri as music_uri, m.url as music_url, m.id_artist as id_artist, a.name as artist_name, a.uri as artist_uri, a.letters as artist_letters, FNC_GET_TAGS(m.id_music, 3, '|') music_tags from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and a.id_artist = ?
tamandua.indexer.lyric=select l.id_lyric as id_lyric, m.id_music as id_music, l.laguage as laguage, l.text as text, l.total_access as total_access, l.uri as lyric_uri, l.lyric_title as lyric_title, l.lyric_type as lyric_type,  m.title as music_title, m.uri as music_uri, m.url as music_url, m.id_artist as id_artist, a.name as artist_name, a.uri as artist_uri, a.letters as artist_letters, FNC_GET_TAGS(m.id_music, 3, '|') music_tags from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and l.id_lyric = ?
tamandua.indexer.music=select l.id_lyric as id_lyric, m.id_music as id_music, l.laguage as laguage, l.text as text, l.total_access as total_access, l.uri as lyric_uri, l.lyric_title as lyric_title, l.lyric_type as lyric_type,  m.title as music_title, m.uri as music_uri, m.url as music_url, m.id_artist as id_artist, a.name as artist_name, a.uri as artist_uri, a.letters as artist_letters, FNC_GET_TAGS(m.id_music, 3, '|') music_tags from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and m.id_music = ?
tamandua.indexer.music.count=select count(l.id_lyric) from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and m.id_music = ?
tamandua.indexer.letter.count=select count(l.id_lyric) from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and a.letters = ?
tamandua.indexer.letter=select l.id_lyric as id_lyric, m.id_music as id_music, l.laguage as laguage, l.text as text, l.total_access as total_access, l.uri as lyric_uri, l.lyric_title as lyric_title, l.lyric_type as lyric_type,  m.title as music_title, m.uri as music_uri, m.url as music_url, m.id_artist as id_artist, a.name as artist_name, a.uri as artist_uri, a.letters as artist_letters, FNC_GET_TAGS(m.id_music, 3, '|') music_tags from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and a.letters = ?
tamandua.indexer.multiletter.count=select count(l.id_lyric) from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and length(a.letters) > 1
tamandua.indexer.multiletter=select l.id_lyric as id_lyric, m.id_music as id_music, l.laguage as laguage, l.text as text, l.total_access as total_access, l.uri as lyric_uri, l.lyric_title as lyric_title, l.lyric_type as lyric_type,  m.title as music_title, m.uri as music_uri, m.url as music_url, m.id_artist as id_artist, a.name as artist_name, a.uri as artist_uri, a.letters as artist_letters, FNC_GET_TAGS(m.id_music, 3, '|') music_tags from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S' and length(a.letters) > 1
tamandua.indexer.full.count=select count(l.id_lyric) from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S'
tamandua.indexer.full=select l.id_lyric as id_lyric, m.id_music as id_music, l.laguage as laguage, l.text as text, l.total_access as total_access, l.uri as lyric_uri, l.lyric_title as lyric_title, l.lyric_type as lyric_type,  m.title as music_title, m.uri as music_uri, m.url as music_url, m.id_artist as id_artist, a.name as artist_name, a.uri as artist_uri, a.letters as artist_letters, FNC_GET_TAGS(m.id_music, 3, '|') music_tags from ((lyric l left join music m on m.id_music = l.id_music) left join artist a on a.id_artist = m.id_artist) where m.flag_publication = 'S' and l.original_flag = 'S'
tamandua.indexer.artists=select id_artist, name as artist_name, uri as artist_uri, letters as artist_letters from artist where uri is not null and letters is not null and letters <> '' and flag_public = 'S'
tamandua.indexer.artists.count=select count(id_artist) from artist where uri is not null and letters is not null and letters <> '' and flag_public = 'S'
tamandua.indexer.integration=select m.id_music as id_music, m.title as music_title, m.uri as music_uri, m.idt_track_radio as idt_track_radio, a.name as artist_name from music m, artist a where a.id_artist = m.id_artist and m.idt_track_radio is not null
tamandua.indexer.integration.count=select count(m.id_music) from music m, artist a where a.id_artist = m.id_artist and m.idt_track_radio is not null
tamandua.indexer.artist_images=select i.id_image id_image, i.url image_url, i.uri image_uri, i.width image_width, i.height image_height, i.provider image_provider, ai.id_artist, a.name artist_name, a.uri artist_uri from image i, artist_image ai, artist a where ai.id_image = i.id_image and a.id_artist = ai.id_artist and i.flag_public = 'S'
tamandua.indexer.artist_images.count=select count(i.id_image) from image i, artist_image ai, artist a where ai.id_image = i.id_image and a.id_artist = ai.id_artist and i.flag_public = 'S'

tamandua.db.url=jdbc:mysql://base.tocaletra.com.br:3306/tamandua_db
tamandua.db.driver=org.gjt.mm.mysql.Driver
tamandua.db.login=crawler
tamandua.db.password=crawler
tamandua.db.fetchsize=3000
tamandua.index.memory_ram_buff=1024

tamandua.index.directory=/export/tamandua-index/idx
tamandua.index.artists.directory=/export/tamandua-index/idx_artists
tamandua.index.integration.directory=/export/tamandua-index/idx_integration
tamandua.index.artist_images.directory=/export/tamandua-index/idx_artist_images
tamandua.index.stopwords.file=/export/tamandua-index/stopwords.txt

################################
# Faz o tratamento se os campos serao indexados ou nao, armazenados ou nao e se 
# serao vetorizados
# *.store (YES | NO) 
#      Store the original field value in the index. This is useful for short 
#      texts like a document's title which should be displayed with the results.
# *.index (NO | ANALYZED | NOT_ANALIZED | NOT_ANALYZED_NO_NORMS | ANALYZED_NO_NORMS)
#      Specifies whether and how a field should be indexed.
#      NO> Do not index the field value. This field can thus not be searched
#      ANALYZED> Index the tokens produced by running the field's value through 
#                an Analyzer
#      NOT_ANALYZED> Index the field's value without using an Analyzer, so it 
#                    can be searched. As no analyzer is used the value will be 
#                    stored as a single term. This is useful for unique Ids like
#                    product numbers.
#      NOT_ANALYZED_NO_NORMS> Expert: Index the field's value without an Analyzer,
#                             and also disable the storing of norms. Note that you
#                             can also separately enable/disable norms by calling
#                             Field.setOmitNorms().  No norms means that
#                             index-time field and document boosting and field
#                             length normalization are disabled.  The benefit is
#                             less memory usage as norms take up one byte of RAM
#                             per indexed field for every document in the index,
#                             during searching.  Note that once you index a given
#                             field <i>with</i> norms enabled, disabling norms will
#                             have no effect.  In other words, for this to have the
#                             above described effect on a field, all instances of
#                             that field must be indexed with NOT_ANALYZED_NO_NORMS
#                             from the beginning.
#      ANALYZED_NO_NORMS> Expert: Index the tokens produced by running the
#                         field's value through an Analyzer, and also
#                         separately disable the storing of norms.  See
#                         {@link #NOT_ANALYZED_NO_NORMS} for what norms are
#                         and why you may want to disable them.
#
# *.termvector (NO | YES | WITH_POSITIONS | WITH_OFFSETS | WITH_POSITIONS_OFFSETS)
#      NO> Do not store term vectors
#      YES> Store the term vectors of each document. A term vector is a list
#           of the document's terms and their number of occurrences in that document.
#      WITH_POSITIONS> Store the term vector + token position information
#      WITH_OFFSETS> Store the term vector + Token offset information
#      WITH_POSITIONS_OFFSETS> Store the term vector + Token position and offset information
#
tamandua.id_lyric.store=YES
tamandua.id_lyric.index=ANALYZED_NO_NORMS
tamandua.id_lyric.termvector=NO

tamandua.id_music.store=YES
tamandua.id_music.index=ANALYZED_NO_NORMS
tamandua.id_music.termvector=NO

tamandua.laguage.store=YES
tamandua.laguage.index=NO
tamandua.laguage.termvector=NO

tamandua.text.store=YES
tamandua.text.index=ANALYZED
tamandua.text.termvector=YES

tamandua.total_access.store=YES
tamandua.total_access.index=NO
tamandua.total_access.termvector=NO

tamandua.lyric_uri.store=YES
tamandua.lyric_uri.index=NO
tamandua.lyric_uri.termvector=NO

tamandua.lyric_title.store=YES
tamandua.lyric_title.index=NO
tamandua.lyric_title.termvector=NO

tamandua.lyric_type.store=YES
tamandua.lyric_type.index=NO
tamandua.lyric_type.termvector=NO

tamandua.music_title.store=YES
tamandua.music_title.index=ANALYZED_NO_NORMS
tamandua.music_title.termvector=NO

tamandua.music_uri.store=YES
tamandua.music_uri.index=ANALYZED_NO_NORMS
tamandua.music_uri.termvector=NO

tamandua.music_url.store=YES
tamandua.music_url.index=NO
tamandua.music_url.termvector=NO

tamandua.id_artist.store=YES
tamandua.id_artist.index=NO
tamandua.id_artist.termvector=NO

tamandua.artist_name.store=YES
tamandua.artist_name.index=ANALYZED_NO_NORMS
tamandua.artist_name.termvector=NO

tamandua.artist_uri.store=YES
tamandua.artist_uri.index=NOT_ANALYZED
tamandua.artist_uri.termvector=NO

tamandua.artist_letters.store=YES
tamandua.artist_letters.index=NO
tamandua.artist_letters.termvector=NO

tamandua.music_tags.store=YES
tamandua.music_tags.index=ANALYZED_NO_NORMS
tamandua.music_tags.termvector=NO

tamandua.idt_track_radio.store=YES
tamandua.idt_track_radio.index=NO
tamandua.idt_track_radio.termvector=NO

tamandua.url_video_clip.store=YES
tamandua.url_video_clip.index=NO
tamandua.url_video_clip.termvector=NO

tamandua.id_image.store=YES
tamandua.id_image.index=ANALYZED_NO_NORMS
tamandua.id_image.termvector=NO

tamandua.image_url.store=YES
tamandua.image_url.index=ANALYZED_NO_NORMS
tamandua.image_url.termvector=NO

tamandua.image_uri.store=YES
tamandua.image_uri.index=ANALYZED_NO_NORMS
tamandua.image_uri.termvector=NO

tamandua.image_width.store=YES
tamandua.image_width.index=ANALYZED_NO_NORMS
tamandua.image_width.termvector=NO

tamandua.image_height.store=YES
tamandua.image_height.index=ANALYZED_NO_NORMS
tamandua.image_height.termvector=NO

tamandua.image_provider.store=YES
tamandua.image_provider.index=ANALYZED_NO_NORMS
tamandua.image_provider.termvector=NO

tamandua.image_description.store=YES
tamandua.image_description.index=NO
tamandua.image_description.termvector=NO
